#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use Chrif\Cocotte\Filesystem\CocotteFilesystem;
use Symfony\Component\Process\Process;

# for mounted files in dev (does nothing in prod, they are already executable)
$process = new Process("chmod +x /installer/bin/* /installer/vendor/bin/*");
$process->mustRun();

# This is crooked but it serves our purpose:
# Create a path on installer identical to the storage path on host.
# Because docker machine stores an absolute path in its config files and
# we want it to work outside of the installer afterwards.
# This solution is preferred to editing the json config files after machine creation and
# every time docker machine would rewrite it.
$filesystem = new CocotteFilesystem();
$userSuppliedMachinePath = getenv('MACHINE_STORAGE_PATH');
if (!$userSuppliedMachinePath) {
    fwrite(STDERR, "Error: MACHINE_STORAGE_PATH is not set in environment\n");
    exit(1);
}
$defaultMachinePath = "/host/machine";
if ($defaultMachinePath !== $userSuppliedMachinePath) {
    if (!$filesystem->exists($userSuppliedMachinePath)) {
        if (is_dir($defaultMachinePath) && !is_dir("$defaultMachinePath/certs")) {
            fwrite(
                STDERR,
                "Error: Tried to create a directory named 'machine' in the directory from where you ".
                "executed Cocotte but it already exists and it is not a valid docker machine storage path.\n"
            );
            exit(1);
        }
        $filesystem->mkdir("$defaultMachinePath/certs");
        $filesystem->symlink($defaultMachinePath, $userSuppliedMachinePath);
    } elseif (
        !is_link($userSuppliedMachinePath) ||
        $filesystem->readlink($userSuppliedMachinePath) !== $defaultMachinePath
    ) {
        fwrite(
            STDERR,
            "Error: cannot symlink '$defaultMachinePath' to '$userSuppliedMachinePath' because it is a real ".
            "path on Cocotte filesystem. Start Cocotte from a different directory on your computer. One that does " .
            "not exist in the Filesystem Hierarchy Standard of a UNIX-like operating system\n"
        );
        exit(1);
    }
}
